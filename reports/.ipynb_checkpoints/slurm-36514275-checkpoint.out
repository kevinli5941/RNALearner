/home/kli3/.conda/envs/scbert/lib/python3.9/site-packages/torch/distributed/launch.py:180: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
Test: [3 6 8 2] [ 4  5 11  1  7  0 10  9]
Train label:  tensor([0, 1, 1, 0])  Val label:  tensor([0, 0, 1, 0, 1, 0, 1, 1])
/panfs/ccds02/nobackup/people/kli3/RNALearner/performer_pytorch/performer_pytorch.py:115: UserWarning: torch.qr is deprecated in favor of torch.linalg.qr and will be removed in a future PyTorch release.
The boolean parameter 'some' has been replaced with a string parameter 'mode'.
Q, R = torch.qr(A, some)
should be replaced with
Q, R = torch.linalg.qr(A, 'reduced' if some else 'complete') (Triggered internally at ../aten/src/ATen/native/BatchLinearAlgebra.cpp:2349.)
  q, r = torch.qr(unstructured_block.cpu(), some = True)
begin training
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 1 | Training Loss: 0.694694 | Accuracy: 50.0000%  ==
    ==  Epoch: 1 | Validation Loss: 0.694811 | Accuracy: 50.0000%  ==
[[0 4]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 2 | Training Loss: 0.694538 | Accuracy: 50.0000%  ==
    ==  Epoch: 2 | Validation Loss: 0.694359 | Accuracy: 50.0000%  ==
[[0 4]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 3 | Training Loss: 0.694143 | Accuracy: 50.0000%  ==
    ==  Epoch: 3 | Validation Loss: 0.693616 | Accuracy: 50.0000%  ==
[[0 4]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 4 | Training Loss: 0.693479 | Accuracy: 50.0000%  ==
    ==  Epoch: 4 | Validation Loss: 0.692538 | Accuracy: 50.0000%  ==
[[0 4]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 5 | Training Loss: 0.692021 | Accuracy: 50.0000%  ==
    ==  Epoch: 5 | Validation Loss: 0.691399 | Accuracy: 50.0000%  ==
[[0 4]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 6 | Training Loss: 0.690059 | Accuracy: 50.0000%  ==
    ==  Epoch: 6 | Validation Loss: 0.690069 | Accuracy: 62.5000%  ==
[[1 3]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 7 | Training Loss: 0.688273 | Accuracy: 50.0000%  ==
    ==  Epoch: 7 | Validation Loss: 0.689297 | Accuracy: 87.5000%  ==
[[3 1]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 8 | Training Loss: 0.686064 | Accuracy: 100.0000%  ==
    ==  Epoch: 8 | Validation Loss: 0.688468 | Accuracy: 62.5000%  ==
[[4 0]
 [3 1]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 9 | Training Loss: 0.684537 | Accuracy: 75.0000%  ==
    ==  Epoch: 9 | Validation Loss: 0.688105 | Accuracy: 75.0000%  ==
[[4 0]
 [2 2]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 10 | Training Loss: 0.683057 | Accuracy: 100.0000%  ==
    ==  Epoch: 10 | Validation Loss: 0.687419 | Accuracy: 75.0000%  ==
[[2 2]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 11 | Training Loss: 0.681341 | Accuracy: 100.0000%  ==
    ==  Epoch: 11 | Validation Loss: 0.686658 | Accuracy: 75.0000%  ==
[[2 2]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 12 | Training Loss: 0.680112 | Accuracy: 100.0000%  ==
    ==  Epoch: 12 | Validation Loss: 0.686038 | Accuracy: 75.0000%  ==
[[2 2]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 13 | Training Loss: 0.678800 | Accuracy: 100.0000%  ==
    ==  Epoch: 13 | Validation Loss: 0.685745 | Accuracy: 75.0000%  ==
[[2 2]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 14 | Training Loss: 0.677981 | Accuracy: 100.0000%  ==
    ==  Epoch: 14 | Validation Loss: 0.685526 | Accuracy: 75.0000%  ==
[[2 2]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 15 | Training Loss: 0.677359 | Accuracy: 100.0000%  ==
    ==  Epoch: 15 | Validation Loss: 0.685421 | Accuracy: 87.5000%  ==
[[3 1]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 16 | Training Loss: 0.676923 | Accuracy: 100.0000%  ==
    ==  Epoch: 16 | Validation Loss: 0.685320 | Accuracy: 87.5000%  ==
[[3 1]
 [0 4]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 17 | Training Loss: 0.676583 | Accuracy: 100.0000%  ==
    ==  Epoch: 17 | Validation Loss: 0.685007 | Accuracy: 87.5000%  ==
[[4 0]
 [1 3]]
0 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([0, 1])
1 tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0') tensor([1, 0])
    ==  Epoch: 18 | Training Loss: 0.675767 | Accuracy: 100.0000%  ==
    ==  Epoch: 18 | Validation Loss: 0.684444 | Accuracy: 62.5000%  ==
[[4 0]
 [3 1]]
JobID        JobIDRaw        JobName  Partition  MaxVMSize  MaxVMSizeNode  MaxVMSizeTask  AveVMSize     MaxRSS MaxRSSNode MaxRSSTask     AveRSS MaxPages MaxPagesNode   MaxPagesTask   AvePages     MinCPU MinCPUNode MinCPUTask     AveCPU   NTasks  AllocCPUS    Elapsed      State ExitCode AveCPUFreq ReqCPUFreqMin ReqCPUFreqMax ReqCPUFreqGov     ReqMem ConsumedEnergy  MaxDiskRead MaxDiskReadNode MaxDiskReadTask    AveDiskRead MaxDiskWrite MaxDiskWriteNode MaxDiskWriteTask   AveDiskWrite    ReqTRES  AllocTRES TRESUsageInAve TRESUsageInMax TRESUsageInMaxNode TRESUsageInMaxTask TRESUsageInMin TRESUsageInMinNode TRESUsageInMinTask TRESUsageInTot TRESUsageOutMax TRESUsageOutMaxNode TRESUsageOutMaxTask TRESUsageOutAve TRESUsageOutTot 

36514275     36514275     scbertpre+    compute                                                                                                                                                                                                              32   00:00:39    RUNNING      0:0                  Unknown       Unknown       Unknown       720G                                                                                                                                          billing=3+ billing=3+                                                                                                                                                                                                                                 
36514275.ba+ 36514275.ba+      batch                                                                                                                                                                                                               1         32   00:00:39    RUNNING      0:0          0             0             0             0                         0                                                                                                                                      cpu=32,gr+                                                                                                                                                                                                                                 
